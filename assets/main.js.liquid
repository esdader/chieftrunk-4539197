var ChiefTrunk = ChiefTrunk || {};

ChiefTrunk = {

    common: {

        init: function () {
            var self = this;

            self.vents();

        },

        vents: function () {
            var self = this;

            self.miniNavBtn.on('click tap', function(e) {
                e.preventDefault();
                self.miniNav.addClass('is-open');
                self.trackOutsideClick();
            });
        },

        trackOutsideClick: function() {
            var self = this;

            $('html').on('click', function(e){
                self.miniNav.removeClass('is-open');
                $('html').off('click');
            });

            self.miniNavBtn.on('click', function(e){
                e.stopPropagation();
            });
        }

    },

    giantImage: {
        init: function (customControls) {
            var self = this;

            // check if should track custom controls
            if ( typeof(customControls) === 'undefined') {
                self.customControls = false;
            } else {
                self.customControls = true;

                self.nextBtns = $('.slider-next-btn');
                self.prevBtns = $('.slider-prev-btn');
                self.flex     = $('.flexslider');
            }

            self.photoRatio = 2000 / 1011;
            self.sideCrop = 0;
            self.imageWidth = 0;
            self.slideImage = $('.slide-image');

            if (!Modernizr.touch) {
                self.scaleLayout();
            } else {
                self.scaleSlides();
            }

            self.vents();
        },

        findLayout: function() {
            var self = this;

            self.winHeight = $(window).height();
            self.winWidth  = $(window).width();
            self.aspectRatio = self.winWidth / self.winHeight;
        },

        vents: function () {
            var self = this;

            $(window).resize(function(){
                
                if (!Modernizr.touch) {
                    self.scaleLayout();
                } else {
                    self.scaleSlides();
                }
            });

            if (self.customControls === true ) {
                self.nextBtns.on('click', function(e) {
                    e.preventDefault();
                    self.flex.flexslider('next');
                });

                self.prevBtns.on('click', function(e) {
                    e.preventDefault();
                    self.flex.flexslider('previous');
                });
            }
        },

        scaleLayout: function () {
            var self = this;
            self.findLayout();
            
            if (self.aspectRatio > self.photoRatio) {
               self.slideImage.css({
                    'margin-left' : '0',
                    'width' : self.winWidth+'px',
                    'height' : 'auto'
                });

            } else {
                self.sideCrop = (self.winHeight *  self.photoRatio - self.winWidth) / 2;
                self.imageWidth = self.winHeight * self.photoRatio;
                var marginLeft = '-' + self.sideCrop + 'px';
                self.slideImage.css({
                    'margin-left' : '-'+self.sideCrop+'px',
                    'width' : self.imageWidth+'px',
                    'height' : self.winHeight+'px'
                });

            }
        },

        scaleSlides: function () {
            var self = this;
            self.findLayout();

            if (self.aspectRatio > self.photoRatio) {
               self.slideImage.css({
                    'margin-left' : '0',
                    'width' : self.winWidth+'px',
                    'height' : 'auto'
                });
            } else {
                self.sideCrop = (self.winHeight * self.photoRatio - self.winWidth) / 2;
                self.imageWidth = self.winHeight * self.photoRatio;
                self.slideImage.css({
                    'margin-left' : '-'+self.sideCrop+'px',
                    'width' : self.imageWidth+'px',
                    'height' : self.winHeight+'px'
                });
            }

        }
    },

    product: {

        init: function () {
            var self = this;

            self.$window             = $(window);
            self.productInfo         = $('.product-info');
            self.productInfoWidth    = self.productInfo.width();
            self.productInfoHeight   = self.productInfo.height();
            self.productImages       = $('.product-images');
            self.imageLinks          = self.productImages.find('.thmb-links');
            self.thumbs              = self.productImages.find('img');
            self.productImagesWidth  = self.productImages.width();
            self.productImagesHeight = self.productImages.height();
            self.winHeight           = $.waypoints('viewportHeight');
            self.winWidth            = $(window).width();
            self.mainImage           = $('.featured-img');
            self.tip                 = $('.tool-tip');
            self.close_btn           = $('.close_btn');
            self.giantImageHolder    = $('.giant-image-holder');
            self.giantImage          = self.giantImageHolder.find('img');
            self.invisibles          = $('.invisible');
            self.tallestCol          = 0;
            self.availableWidth      = 0;
            self.availableHeight     = 0;
            self.colMargin           = 0;

            // kick off funtions
            self.initializeProductPage();
            self.vents();

        },

        vents: function () {
            var self = this;

            $(window).on('resize', function(e) {
                self.initializeProductPage();
            });

            self.imageLinks.on('click', function(e){
                e.preventDefault();
                var $this    = $(this),
                    earl     = $this.attr('href'),
                    theAlt   = $this.attr('alt'),
                    theGiant = $this.data('giant-image');
                    console.log(theGiant);
                
                self.mainImage
                    .fadeOut(function(){
                        self.mainImage.attr({'src': earl, 'alt': theAlt})
                            .data('giant-image', theGiant)
                            .fadeIn();
                    });
                    
            });


            //Tooltips
            self.mainImage.hover(function(){
                self.tip.show(); //Show tooltip
            }, function() {
                self.tip.hide(); //Hide tooltip
            })
            .mousemove(function(e) {
                //Change these numbers to move the tooltip offset
                var mousex = e.pageX + 16; //Get X coodrinates
                var mousey = e.pageY + 16 - 107; //Get Y coordinates. 
                var tipWidth = self.tip.width(); //Find width of tooltip
                var tipHeight = self.tip.height(); //Find height of tooltip
                
                //Distance of element from the right edge of viewport
                var tipVisX = $(window).width() - (mousex + tipWidth);
                //Distance of element from the bottom of viewport
                var tipVisY = $(window).height() - (mousey + tipHeight);
                if (tipVisX < 20) { //If tooltip exceeds the X coordinate of viewport
                    mousex = e.pageX - tipWidth - 20;
                } if (tipVisY < 20) { //If tooltip exceeds the Y coordinate of viewport
                    mousey = e.pageY - tipHeight - 20 - 107;
                }
                //Absolute position the tooltip according to mouse position
                self.tip.css({  top: mousey, left: mousex });
            })
            .on('click', function(e){
                e.preventDefault();

                var $this = $(this),
                    earl  = self.mainImage.data('giant-image');

                self.giantImage.attr('src', earl);
                self.giantImageHolder.fadeIn();
            });

            self.giantImageHolder.hover(function(){
                self.close_btn.show(); //Show tooltip
            }, function() {
                self.close_btn.hide(); //Hide tooltip
            })
            .mousemove(function(e) {
                //Change these numbers to move the tooltip offset
                var mousex = e.pageX + 16; //Get X coodrinates
                var mousey = e.pageY + 16 - 107; //Get Y coordinates. 
                var tipWidth = self.close_btn.width(); //Find width of tooltip
                var tipHeight = self.close_btn.height(); //Find height of tooltip
                
                //Distance of element from the right edge of viewport
                var tipVisX = $(window).width() - (mousex + tipWidth);
                //Distance of element from the bottom of viewport
                var tipVisY = $(window).height() - (mousey + tipHeight);
                if (tipVisX < 20) { //If tooltip exceeds the X coordinate of viewport
                    mousex = e.pageX - tipWidth - 20;
                } if (tipVisY < 20) { //If tooltip exceeds the Y coordinate of viewport
                    mousey = e.pageY - tipHeight - 20 - 107;
                }
                //Absolute position the tooltip according to mouse position
                self.close_btn.css({  top: mousey, left: mousex });
            })
            .on('click', function(e){
                e.preventDefault();

                var $this = $(this);
                $this.fadeOut();
            });

        },

        initializeProductPage: function () {


            var self = this;

            self.winHeight = $.waypoints('viewportHeight');
            self.winWidth  = $(window).width();

            self.availableHeight = self.winHeight - 170;
            self.availableWidth  = self.winWidth - self.productInfoWidth - self.productImagesWidth;

            // set image height or width
            if (self.availableHeight > self.availableWidth) {
                self.mainImage.css({'max-width': self.availableWidth, 'height': 'auto'});
            } else {
                var mLeft = self.availableHeight / 2;
                self.mainImage.css({
                        'max-height': self.availableHeight,
                        'width': 'auto',
                        'position': 'absolute',
                        'left': '50%',
                        'margin-left': -self.availableHeight / 2
                        
                        });
                self.colMargin = (self.availableWidth - self.availableHeight) / 4;
                self.productInfo.css('margin-left', self.colMargin);
                self.productImages.css('margin-right', self.colMargin);

            }

            // center columns within page

            if (self.productInfoHeight > self.productImagesHeight) {
                self.productImages.css('height', self.productInfoHeight);
                var topMargin = (self.availableHeight - self.productInfoHeight) / 2;
                self.productImages.css('margin-top', topMargin);
                self.productInfo.css('margin-top', topMargin);
                var $thumbs = $(self.thumbs);
                var thmbMargin = (self.productInfoHeight - $thumbs.length * 70) / 2;
                
                $(self.thumbs[0]).css('margin-top', thmbMargin);

            }

            self.displayItems();

        },

        displayItems: function() {
            var self = this;

            self.invisibles
                .hide(function() {
                    $(this)
                        .removeClass('invisible')
                        .fadeIn();
                });
        }

    },

    shopLanding: {

    },

    products: {
        init: function() {
            var self = this;

            self.headerHeight      = $('.main-header').height();
            self.productsLanding   = $('.products-landing');
            self.lastSectionHeight = self.productsLanding.find('section').last().height();

            // set bottom padding
            self.setBottomPadding();
        },
        setBottomPadding: function() {
            var self      = this,
                winHeight = $(window).height(),
                bottomPadding;

            bottomPadding = winHeight - self.headerHeight - self.lastSectionHeight;
            self.productsLanding.css('padding-bottom', bottomPadding);
        }
    },

    adminPages: {
        init: function () {

        },

        positionFauxModal: function () {

        }
    }
};